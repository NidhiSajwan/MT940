package icore;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.Scanner;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;
//Add :input from user for no. of threads and store the output in csv file
//Add start time , end time ,response time, file size, file name and At the top write configuration of system like RAM size and processor
//Add properties file, valid message for adding threads, valid message at end that all threads has been executed, add time unit and in excel sheet try to find the format for hh-mm-ss-SSS

import java.util.concurrent.TimeUnit;

import org.apache.commons.lang3.time.StopWatch;

import com.fci.icoreparser.MT940Converter;
import com.opencsv.CSVWriter;


class TimeCheck implements Runnable{
private String name;
private Long kb;
public String str;
public String text="";
StopWatch stopWatch= new StopWatch();



public Runnable fun(String str,String filename,long kbs) {
	
	this.text=str;
	this.name = filename;
	this.kb = kbs;
	return this;
	
}
@Override
public void run() {
	long responseTime;
	Map<String, Object> obj = new HashMap<>();
	 
	stopWatch.start();
	//long start = System.currentTimeMillis();
	String start= new SimpleDateFormat("hh:mm:ss.SSS").format(new Date());
	obj = MT940Converter.convertToMT940(text);
//	System.out.println(obj.toString());
	stopWatch.stop();
	
	String end = new SimpleDateFormat("hh:mm:ss.SSS").format(new Date());
	responseTime= stopWatch.getTime(TimeUnit.MILLISECONDS);
    String  response_time= String.valueOf(responseTime);
  
    
//	test.writeData(str);
    String str[] = new String[]{name,kb.toString()+"kb",response_time+"ms",start,end};
	System.out.println("Response Time: "+stopWatch.getTime(TimeUnit.MILLISECONDS)+ " ms");
//	System.out.println("Start time: " +start);
//	System.out.println("End Time:" + end);
//	String account_no= String.valueOf(obj.get("customer account number"));
	test.writeData(str);
	
}



}


public class test {
	
	
	
	public static void writeData(String[] str) {

		File file = new File("C:\\Users\\liber\\eclipse-workspace\\MT940\\output\\"+str[0].replace(".txt", "")+"_output.csv");
		try {
			FileWriter outputFile = new FileWriter(file,true);
			CSVWriter writer = new CSVWriter(outputFile);
	//		String header[]= {"Name","Size","Response time","start time","End time"};
	//		writer.writeNext(header);
			writer.writeNext(str);
			outputFile.close();
//			writer.close();
			
		} catch (IOException e) {
			
			
			e.printStackTrace();
		}
		
	
	}

	public static void main(String[] args) {
		int numOfThread;
		
		Scanner input= new Scanner(System.in);
		System.out.println("Enter the number of threads: ");
		numOfThread= input.nextInt();
	
		String text="";
		String name ="";
		long bytes=0;
		
		FileReader reader = null;
		try {
			reader = new FileReader("input.properties");
		} catch (FileNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}  
	      
	    Properties p=new Properties();  
	    try {
			p.load(reader);
		} catch (IOException e1) {
			
			e1.printStackTrace();
		}  
	      
	   // System.out.println("File name: " +p.getProperty("inputFile"));  
	    
		
		String filePath= p.getProperty("inputFile");
		
		
			try {
				
				
				text= new String( Files.readAllBytes(Paths.get(filePath)));
				
				//To get file name
				File F = new File(filePath);		
				name= F.getName();
				System.out.println("File name : "+ name);
			
				//To get file size
				Path path= Paths.get(filePath);
				bytes = Files.size(path);	
				System.out.println("File size: "+ bytes/1024 +"Kb");
				
			
				
			} catch (IOException e) {
				
				e.printStackTrace();

			}
			ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(10);

			String header[]= {"Name","Response time","File Size","start time","End time"};
			writeData(header);
		    for (int i = 1; i <= numOfThread; i++) 
		    {	
		  
		    	TimeCheck time = new TimeCheck();
		    	executor.execute(time.fun(text,name,bytes/1024));
		    	System.out.println("A new Thread has been added");
		    
		    		    			
	    }
		  
		   
		    executor.shutdown();
		   

	}


}
